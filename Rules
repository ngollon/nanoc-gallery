#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

###
# Preprocess: This creates the gallery structure by associating images with albums
###

preprocess do
  images = items.select { |i| i.identifier.start_with?('/images/') }
  albums = items.select { |i| i[:type] == 'album' }
  folders = items.select { |i| i[:type] == 'folder' }

  create_gallery_structure(folders, albums, images)  
end


###
# Static items: Don't do anything, just copy to the output directory
###

compile '/static/*/' do
end

route '/static/*/' do
  item.identifier.chop.gsub(/^\/static\//,'/')
end

###
# Images: Don't do anything, not even copy them. They just provide links for the albums
###

compile '/images/*/' do
end

route '/images/*/' do
  nil
end

###
# Stylesheets and scripts in the content folders /stlesheets and /javascript
# are combined using the style.css and scripts.js files. 
###

compile '/stylesheets/*/' do
  if item[:extension] == 'sass'
    filter :sass
  end
end

compile '/javascript/*/' do
end

compile '/style/' do
  filter :haml
  filter :rainpress
end

compile '/scripts/' do
  filter :haml
#  filter :uglify_js  # this does not work on my win8 dev pc, for whatever reason
end

route '/stylesheets/*/' do
  nil
end

route '/javascript/*/' do
  nil
end

route '/style/' do
  item.identifier.chop + '.' + item[:extension]
end

route '/scripts/' do
  item.identifier.chop + '.' + item[:extension]
end

###
# Special layout rules for albums and folders, and the main index
###

compile '/gallery/' do
  filter :kramdown, :auto_ids => false
  layout 'folder'
  layout 'default'
end

compile '/' do
  filter :haml
  layout 'default'
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :kramdown, :auto_ids => false
    if item[:type] == 'album'
      layout 'album'
    elsif item[:type] == 'folder'
      layout 'folder'
    end
    layout 'default'
  end
end

###

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml
